plugins {
    id 'com.diffplug.spotless' version "6.14.0" apply false
}

ext {
    set('spaceGroup', 'org.spaceframework.ps')
    set('spaceVersion', '1.0.0-SNAPSHOT')
    moduleProjects = subprojects.findAll {it.name.startsWith("plugin-")}
}

group = spaceGroup
version = spaceVersion

configure(allprojects) { project ->

    ext.springBootVersion = "3.3.4"
    ext.directoryWatcherVersion = "0.15.1"

    apply plugin: "java"

    compileJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
            "-Xlint:unchecked", "-Xlint:-options", "-Werror"
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
            "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
            "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
            "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
            "-Xlint:-unchecked", "-Xlint:-options"]

    compileJava {
        sourceCompatibility = 17
        targetCompatibility = 17
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    compileTestJava {
        sourceCompatibility = 17
        targetCompatibility = 17
        options.encoding = 'UTF-8'
        options.compilerArgs += "-parameters"
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    if (JavaVersion.current().isJava11Compatible()) {
        apply plugin: "com.diffplug.spotless"
        spotless {
            java {
                importOrder()
                removeUnusedImports()
                googleJavaFormat('1.28.0')
                trimTrailingWhitespace()
                endWithNewline()
                licenseHeaderFile "${rootProject.projectDir}/checkstyle/java.header", "package"
            }
        }
    }
}

project("plugin-api") {

    apply plugin: "maven-publish"

    dependencies {
        // Spring Boot
        compileOnly platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        compileOnly "org.springframework.boot:spring-boot-starter:${springBootVersion}"
        compileOnly "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = spaceGroup // Replace with your desired group ID
                artifactId = 'space-plugin-api' // Replace with your desired artifact ID
                version = spaceVersion // Replace with your desired version

                from components.java // Publishes the main Java artifact
            }
        }
    }
}

project("plugin-system") {
    dependencies {
        // Internal Module
        implementation project(':plugin-api')
        // Spring Boot
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
        implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"

        implementation "io.methvin:directory-watcher:${directoryWatcherVersion}"

        testImplementation platform('org.junit:junit-bom:5.10.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }
}
